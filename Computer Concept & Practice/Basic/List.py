# 값 추가하기 - append()
a = [1, 3, 5]
a.append(7)

print(a)
# [1, 3, 5, 7]
# append()는 리스트에 새로운 값을 추가합니다.
 

# 리스트 연결하기 - extend()
a = [1, 3, 5]
a.extend([7])

print(a)    # [1, 3, 5, 7]
 
a = [1, 3, 5]
a.extend('apple')

print(a)    # [1, 3, 5, 'a', 'p', 'p', 'l', 'e']
# extend()는 문자열을 문자 단위로 추가합니다.

a = [1, 3, 5]
a += 'apple'
print(a)    # [1, 3, 5, 'a', 'p', 'p', 'l', 'e']
# 리스트에 리스트 또는 문자열을 더하기 연산자 (+)로 연결해주는 것은 extend()의 동작과 같습니다.
 

# 리스트 정렬
# 다양한 방식으로 라이썬 리스트를 정렬할 수 있습니다.

# sort()
# 오름차순
a = [2, 4, 1, 5, 3]
a.sort()       # 오름차순

print(a)
# [1, 2, 3, 4, 5]
# 리스트 객체의 sort() 메서드는 리스트를 크기순으로 정렬합니다. 
# 기본적으로 오름차순으로 정렬합니다. sort()는 자체적으로 원래 리스트를 변경한다.

# 내림차순
a = [2, 4, 1, 5, 3]
a.sort(reverse=True)    # 내림차순

print(a)
# [5, 4, 3, 2, 1]
# reverse=True 로 설정해주면 내림차순으로 정렬합니다.

# 문자열 정렬
b = ['ORANGE', 'black', 'Red', 'apple']
b.sort()

print(b)
# ['ORANGE', 'Red', 'apple', 'black']
# 문자에 대해서는 기본적으로 알파벳순이지만 대문자가 소문자보다 우선 정렬됩니다.

#Cf) sorted() 
a = [2, 4, 1, 5, 3]

print(sorted(a))
print(a)
[1, 2, 3, 4, 5]
[2, 4, 1, 5, 3]
# sort() 가 해당 리스트의 순서를 정렬하는 반면, sorted() 함수는 리스트를 그대로 두고 정렬된 리스트를 반환합니다.

# 또한 sort() 메서드가 리스트에만 정의되는 반면, sorted() 함수는 모든 반복 가능한(iterable) 객체에 대해 적용됩니다.
# 즉 bulit-in function

# 리스트 뒤집기 - reversed()
a = [1, 3, 5, 7, 9]

print(a)
print(list(reversed(a)))
# [1, 3, 5, 7, 9]
# [9, 7, 5, 3, 1]
# list(reversed())는 순서를 뒤집은 새로운 리스트를 반환합니다.
 
# 리스트 메서드
# 파이썬의 리스트 객체는 다양하고 유용한 메서드를 제공합니다.
# list.method() 의 형태로 사용할 수 있습니다.


# insert()
# 지정된 위치에 아이템을 삽입합니다.
a = [1, 2, 3]
a.insert(1, 4)

print(a)
# [1, 4, 2, 3]


# remove()
# 리스트에서 입력한 값을 삭제합니다.
a = [1, 2, 3, 4, 3]
a.remove(3)

print(a)
# [1, 2, 4, 3]
# 입력값 3과 같은 요소가 두 개 이상이라면 첫번째 요소만 삭제합니다.

# pop()
# 입력한 인덱스 위치에 있는 요소를 리스트에서 삭제하고 그 값을 반환합니다.
a = [1, 2, 3, 4, 5]
b = a.pop(3)

print(a)
print(b)
# [1, 2, 3, 5]
# 4
# 만약 pop()에 인덱스를 입력하지 않으면 마지막 요소를 리스트에서 삭제하고 값을 반환합니다.


# clear()
# 리스트의 모든 요소를 삭제합니다.
a = [1, 2, 3, 4]
a.clear()

print(a)
# []


# index()
# 입력값과 일치하는 리스트 요소의 인덱스를 반환합니다. 만약 여러 개가 있다면 첫번째 요소의 인덱스를 반환합니다.
a = [10, 20, 30, 40, 50]
b = a.index(30)

print(b)
# 2


# count()
# 리스트에서 입력한 값이 등장하는 횟수를 반환합니다.
a = [10, 20, 30, 40, 50, 30]
b = a.count(30)

print(b)
# 2



# copy()
# 리스트의 얕은 사본(shallow copy)를 반환합니다.
a = [1, 2, 3, 4, 5]
b = a.copy()

a[1] = 5

print(a)
print(b)
# [1, 5, 3, 4, 5]
# [1, 2, 3, 4, 5]




# 리스트 슬라이싱
# 리스트의 일부 구간 또는 요소를 가져오고 싶을 때 슬라이싱을 사용할 수 있습니다.
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(a[3:5])
print(a[:4])
print(a[7:])
# [4, 5]
# [1, 2, 3, 4]
# [8, 9, 10]
# a[3:5]는 a[3], a[4]를 포함하는 리스트입니다. a[:4]는 a[0]~a[3]을 포함하는 리스트입니다.
# 마찬가지로 a[7:]은 a[7]부터 마지막 요소를 포함하는 리스트가 됩니다.
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(a[len(a)-1])
print(a[-1])
# 10
# 위의 두 코드(a[len(a)-1], a[-1])는 똑같이 리스트의 마지막 요소를 가져옵니다.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(a[:])
print(a[::2])
print(a[-1::-2])
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [1, 3, 5, 7, 9]
# [10, 8, 6, 4, 2]
# a[:]는 a와 같습니다. a[::2]는 step을 2로 해서 리스트 [1, 3, 5, 7, 9]가 됩니다.
# 마찬가지로 a[-1::-2]는 마지막 요소부터 시작해서 앞으로 하나 건너 하나씩 요소를 가져옵니다. 

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(a[len(a)-1::-1])
print(a[-1::-1])
print(a[::-1])
# [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
# [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
# [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
# 위의 세가지 방식은 모두 순서가 뒤집어진 리스트가 됩니다.


a = [1, 3, 5, 7, 9]
print(a[1:4])

a[1:4] = [357]
print(a)
# [1, 357, 9]
# 리스트 슬라이싱을 이용해서 여러개의 요소를 하나의 요소로 바꿀 수 있고,


a = [1, 3, 5, 7, 9]
print(a[1:2])

a[1:2] = [3, 4]
print(a)
# [1, 3, 4, 5, 7, 9]
# 하나의 요소를 리스트로 바꾸거나 특정 구간 리스트를 다른 리스트로 바꿀 수도 있습니다.




# 리스트 컴프리헨션
# 리스트 컴프리헨션은 파이썬 리스트를 만드는 간결한 방법입니다.
a = [1, 2, 3, 4, 5]
a_square = [1, 4, 9, 16, 25]
# a라는 리스트에 대해 각 요소의 제곱의 값을 갖는 a_square와 같은 새로운 리스트를 만들려고 합니다.

b = [1, 2, 3, 4, 5]
b_square = []
for n in b:
  b_square.append(n**2)

print(b_square)
# [1, 4, 9, 16, 25]


# 만약 컴프리헨션을 사용한다면
c = [1, 2, 3, 4, 5]
c_square = [n**2 for n in c]

print(c_square)
# [1, 4, 9, 16, 25]
# 위와 같이 훨씬 간결한 한 줄의 코드로 새로운 리스트를 만들 수 있습니다.
# 예제에서 볼 수 있듯이 리스트 컴프리헨션은 표현식(n**2)과 그 뒤의 for 절과 if 절들을 감싸는 대괄호([ ])로 구성됩니다. 그리고 그 결과는 새로운 리스트가 됩니다.

# 아래 코드는 두 개의 for 절과 조건식을 사용한 리스트 컴프리헨션의 예제입니다.
d = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]
print(d)
# [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
# 리스트 [1, 2, 3]와 [3, 1, 4]의 각 요소 x, y에 대해 값이 같지 않은 경우만 표현식 (x, y) 튜플을 새로운 리스트의 요소로 만듭니다.
